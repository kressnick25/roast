use std::env;
use std::fs;
use std::path::{PathBuf, Path};
use std::ops::Deref;
use assert_cmd::Command;
use assertables::assert_contains;

use tempfile::TempDir;
struct Fixture {
    path: PathBuf,
    source: PathBuf,
    tempdir: TempDir,
}

impl Fixture {
    fn blank(fixture_filename: &str) -> Self {
        let root_dir = &env::var("CARGO_MANIFEST_DIR").expect("$CARGO_MANIFEST_DIR");
        let mut source = PathBuf::from(root_dir);
        source.push("tests/fixtures");
        source.push(&fixture_filename);

        let tempdir = tempfile::tempdir().unwrap();
        let mut path = PathBuf::from(&tempdir.path());
        path.push(&fixture_filename);

        Fixture { tempdir, source, path }
    }

    fn copy(fixture_filename: &str) -> Self {
        let fixture = Fixture::blank(fixture_filename);
        fs::copy(&fixture.source, &fixture.path).unwrap();
        fixture
    }
}

impl Deref for Fixture {
    type Target = Path;

    fn deref(&self) -> &Self::Target {
        self.path.deref()
    }
}

#[test]
fn node_modules_excluded() -> Result<(), String> {
    let fixture = Fixture::copy("simple.json");
    let mut nm_path = PathBuf::from(&fixture.tempdir.path());
    nm_path.push("node_modules/");
    fs::create_dir(&nm_path).unwrap();

    nm_path.push("simple.json");
    fs::copy(&fixture.source, &nm_path).unwrap();

    let mut cmd = Command::cargo_bin("roast").unwrap();
    let res = cmd.arg(fixture.tempdir.path()).assert().success();

    let out = res.get_output();
    let stderr = String::from_utf8(out.stderr.clone()).unwrap();

    let expected = format!(".{} - OK", fixture.path.display());
    assert_contains!(stderr, &expected);
    assert!(!stderr.contains("node_modules"));

    let original_file = fs::read_to_string(&fixture.source).unwrap();
    let formatted_file = fs::read_to_string(&fixture.path).unwrap();
    let nm_file = fs::read_to_string(&nm_path).unwrap();

    assert_eq!(nm_file, original_file);
    assert_eq!(formatted_file, "{\n\t\"a\": 0,\n\t\"b\": 1\n}\n");


    Ok(())
}
